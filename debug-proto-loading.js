// Debug proto loading
const path = require('path');

console.log('üîß Verificando carga de proto files...');

try {
  // Verificar si los archivos proto existen
  const fs = require('fs');
  const protoPath = path.join(__dirname, 'grpc-services/proto');
  
  console.log('üìÅ Verificando directorio proto:', protoPath);
  
  if (fs.existsSync(protoPath)) {
    console.log('‚úÖ Directorio proto existe');
    const files = fs.readdirSync(protoPath);
    console.log('üìÑ Archivos encontrados:', files);
    
    // Verificar user.proto espec√≠ficamente
    const userProtoPath = path.join(protoPath, 'user.proto');
    if (fs.existsSync(userProtoPath)) {
      console.log('‚úÖ user.proto existe');
      const content = fs.readFileSync(userProtoPath, 'utf8');
      console.log('üìù Primeras l√≠neas de user.proto:');
      console.log(content.split('\n').slice(0, 10).join('\n'));
    } else {
      console.log('‚ùå user.proto no existe');
    }
  } else {
    console.log('‚ùå Directorio proto no existe');
  }
  
  // Intentar cargar la configuraci√≥n gRPC
  console.log('\nüîß Intentando cargar configuraci√≥n gRPC...');
  const grpcConfig = require('./api-gateway/src/config/grpc');
  console.log('‚úÖ Configuraci√≥n gRPC cargada');
  
  // Verificar proto descriptors
  console.log('\nüîß Verificando proto descriptors...');
  console.log('Descriptors disponibles:', Object.keys(grpcConfig.protoDescriptors));
  
  if (grpcConfig.protoDescriptors.usuario) {
    console.log('‚úÖ Descriptor usuario existe');
    console.log('Contenido usuario:', Object.keys(grpcConfig.protoDescriptors.usuario));
    
    if (grpcConfig.protoDescriptors.usuario.usuario) {
      console.log('‚úÖ Paquete usuario.usuario existe');
      console.log('Contenido usuario.usuario:', Object.keys(grpcConfig.protoDescriptors.usuario.usuario));
      
      if (grpcConfig.protoDescriptors.usuario.usuario.UsuarioService) {
        console.log('‚úÖ UsuarioService existe');
        console.log('Tipo de UsuarioService:', typeof grpcConfig.protoDescriptors.usuario.usuario.UsuarioService);
      } else {
        console.log('‚ùå UsuarioService no existe');
      }
    } else {
      console.log('‚ùå Paquete usuario.usuario no existe');
    }
  } else {
    console.log('‚ùå Descriptor usuario no existe');
  }
  
} catch (error) {
  console.error('‚ùå Error:', error);
}