version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: ong-mysql
    environment:
      MYSQL_DATABASE: ong_sistema
      MYSQL_USER: ong_user
      MYSQL_PASSWORD: ong_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ong-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Zookeeper for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: ong-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ong-network

  # Kafka Message Broker
  kafka:
    image: wurstmeister/kafka:latest
    container_name: ong-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: >
        solicitud-donaciones:1:1,
        oferta-donaciones:1:1,
        eventos-solidarios:1:1,
        baja-solicitud-donaciones:1:1,
        baja-evento-solidario:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka_data:/kafka
    networks:
      - ong-network
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: ong-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=your_jwt_secret_change_in_production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=50051
      - INVENTORY_SERVICE_HOST=inventory-service
      - INVENTORY_SERVICE_PORT=50052
      - EVENTS_SERVICE_HOST=events-service
      - EVENTS_SERVICE_PORT=50053
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./api-gateway:/app
      - /app/node_modules

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ong-user-service
    ports:
      - "50051:50051"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=your_jwt_secret_change_in_production
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: ong-inventory-service
    ports:
      - "50052:50052"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/inventory-service:/app

  # Events Service
  events-service:
    build:
      context: ./services/events-service
      dockerfile: Dockerfile
    container_name: ong-events-service
    ports:
      - "50053:50053"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/events-service:/app

volumes:
  mysql_data:
  kafka_data:

networks:
  ong-network:
    driver: bridge