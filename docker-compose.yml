services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: ong-mysql
    environment:
      MYSQL_DATABASE: ong_sistema
      MYSQL_USER: ong_user
      MYSQL_PASSWORD: ong_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ong-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ong-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ong-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ong-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ong-network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: ong-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_change_in_production}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=50051
      - INVENTORY_SERVICE_HOST=inventory-service
      - INVENTORY_SERVICE_PORT=50052
      - EVENTS_SERVICE_HOST=events-service
      - EVENTS_SERVICE_PORT=50053
      - KAFKA_BROKERS=kafka:9092
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - ORGANIZATION_ID=${ORGANIZATION_ID:-ong-empuje-comunitario}
    volumes:
      - ./grpc-services/proto:/app/grpc-services/proto:ro
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
      inventory-service:
        condition: service_started
      events-service:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/health', res => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./grpc-services/services/user-service
      dockerfile: Dockerfile
    container_name: ong-user-service
    ports:
      - "50051:50051"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_change_in_production}
      - GRPC_PORT=50051
      - ORGANIZATION_ID=${ORGANIZATION_ID:-ong-empuje-comunitario}
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import grpc; import sys; from grpc_health.v1 import health_pb2_grpc, health_pb2; channel = grpc.insecure_channel(\"localhost:50051\"); stub = health_pb2_grpc.HealthStub(channel); response = stub.Check(health_pb2.HealthCheckRequest()); sys.exit(0 if response.status == health_pb2.HealthCheckResponse.SERVING else 1)'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./grpc-services/services/inventory-service
      dockerfile: Dockerfile
    container_name: ong-inventory-service
    ports:
      - "50052:50052"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
      - GRPC_PORT=50052
      - ORGANIZATION_ID=${ORGANIZATION_ID:-ong-empuje-comunitario}
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import grpc; import sys; from grpc_health.v1 import health_pb2_grpc, health_pb2; channel = grpc.insecure_channel(\"localhost:50052\"); stub = health_pb2_grpc.HealthStub(channel); response = stub.Check(health_pb2.HealthCheckRequest()); sys.exit(0 if response.status == health_pb2.HealthCheckResponse.SERVING else 1)'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Events Service
  events-service:
    build:
      context: ./grpc-services/services/events-service
      dockerfile: Dockerfile
    container_name: ong-events-service
    ports:
      - "50053:50053"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ong_sistema
      - DB_USER=ong_user
      - DB_PASSWORD=ong_password
      - KAFKA_BROKERS=kafka:9092
      - GRPC_PORT=50053
      - ORGANIZATION_ID=${ORGANIZATION_ID:-ong-empuje-comunitario}
    networks:
      - ong-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import grpc; import sys; from grpc_health.v1 import health_pb2_grpc, health_pb2; channel = grpc.insecure_channel(\"localhost:50053\"); stub = health_pb2_grpc.HealthStub(channel); response = stub.Check(health_pb2.HealthCheckRequest()); sys.exit(0 if response.status == health_pb2.HealthCheckResponse.SERVING else 1)'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend SPA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ong-frontend
    ports:
      - "5173:80"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3000}
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ong-network
    restart: unless-stopped

volumes:
  mysql_data:
  kafka_data:

networks:
  ong-network:
    driver: bridge
